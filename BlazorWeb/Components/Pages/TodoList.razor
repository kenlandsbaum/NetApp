@page "/todo-list"

@using BlazorWeb.Components.Todos
@using BlazorWeb.Models
@using BlazorWeb.Services
@using Microsoft.AspNetCore.Authorization

@namespace BlazorWeb.Components.Pages

@rendermode InteractiveServer

@inject ITodoService TodoService;

@attribute [Authorize]

<PageTitle>Todos</PageTitle>

<TodoCreateForm AddTodo="AddTodo" />
<TodoVisibilityFilter 
    filterText="@visibilityFilters[(@currentFilterIndex +1)%3]"
    ToggleVisibility="ToggleVisibility"
/>

<h2 style="margin: 0.6em 0px;font-weight: 300;">Todos</h2>
@if (todos == null || todos.Count() < 1) 
{
    <p>No todos right now.</p>
} 
else 
{
    @foreach (var todo in GetVisibleTodos())
    {
        <TodoListItem todo="@todo" ToggleComplete="ToggleComplete" DeleteTodo="DeleteTodo" />
    }
}

@code {
    private IEnumerable<TodoItem>? todos {get; set;}

    private string[] visibilityFilters = {"all", "completed", "incomplete"};
    private int currentFilterIndex = 0;
    
    protected override async Task OnInitializedAsync()
    {
        todos = await TodoService.GetTodosAsync();
    }

    private async Task AddTodo(String newTodoName)
    {
        var newTodoId = todos?.Count()?? 0;
        var newTodo = new TodoItem { Title = newTodoName, Id = newTodoId + 1 };
        await TodoService.PostTodoAsync(newTodo);
        todos = await TodoService.GetTodosAsync();
        StateHasChanged();
    }
    private async Task ToggleComplete(TodoItem todo) 
    {
        todo.IsComplete =!todo.IsComplete;
        await TodoService.PutTodoAsync(todo.Id, todo);
    }
    private async Task DeleteTodo(TodoItem todo) 
    {
        await TodoService.DeleteTodoAsync(todo.Id);
        todos = await TodoService.GetTodosAsync();
        StateHasChanged();
    }

    private void ToggleVisibility()
    {
        if (currentFilterIndex == 2)
        {
            currentFilterIndex = 0;
        }
        else
        {
            currentFilterIndex += 1;
        }
    }
    private IEnumerable<TodoItem> GetVisibleTodos()
    {
        if (visibilityFilters[currentFilterIndex] == "all")
        {
            return todos ?? [];
        } 
        else if (visibilityFilters[currentFilterIndex] == "completed")
        {
            return todos?.Where(t => t.IsComplete) ?? [];
        }
        else
        {
            return todos?.Where(t => !t.IsComplete) ?? [];
        }
    }
}